#!/bin/bash
#
# Install unattended upgrade tools on Ubuntu 18.04.
# Notes
#   This script must be run as root (ex.: sudo sh ./[script_name]).
#   This script is designed to be idempotent.
# Style Guide
#   https://google.github.io/styleguide/shellguide.html

# Parameters: all manadatory and must be prefix with "--" on command line.
declare -A parameters=( \
  [server_admin_email]= \
  [server_fqdn]= \
  [server_reboot_utc_time]= \
  [server_resource_name]= \
  [smtp_server_fqdn]= \
  [smtp_server_port]=)

# Constants
readonly APTICRON_CONF_FILE_PATH="/etc/apticron/apticron.conf"
readonly AUTO_UPGRADES_CONF_FILE_PATH="/etc/apt/apt.conf.d/20auto-upgrades"
readonly POSTFIX_CONF_FILE_PATH="/etc/postfix/main.cf"
readonly UNATTENDED_UPGRADES_CONF_FILE_PATH="/etc/apt/apt.conf.d/50unattended-upgrades"

# Functions
source ./logger.sh
source ./utils.sh

#######################################
# Update or append a parameter to a file if missing.
# Arguments:
#   1) Parameter to set, text string.
#   2) Value to set, text string.
#   3) File to update, file path
# Outputs:
#   Writes log messages to STDOUT.
#   Writes error messages to STDERR.
#######################################
function update_or_append() {
  parameter="$1"
  value="$2"
  file_path="$3"

  case $(grep "^${parameter}" "${file_path}" | wc -l) in
  0)
    logger::info "Parameter '${parameter}' not found in ${file_path}. Adding it."
    echo "${parameter} \"${value}\";" >> "${file_path}"
    ;;
  1)
    logger::info "Parameter '${parameter}' found in ${file_path}. Updating it."
    sed -i -e "s|^{parameter}|{parameter} \"${value}\";|g" "${file_path}"
    ;;
  *)
    logger::error "More than one line matched the search criteria. Aborting."
    exit 1
    ;;
  esac
}

#######################################
# Update or insert a parameter to a file at a specific location if missing.
# Arguments:
#   1) Parameter to set, text string.
#   2) Value to set, text string.
#   3) Insertion point, text string
#   4) File to update, file path
# Outputs:
#   Writes log messages to STDOUT.
#   Writes error messages to STDERR.
#######################################
function update_or_insert() {
  parameter="$1"
  value="$2"
  insertion_point="$3"
  file_path="$4"

  case $(grep "^${parameter}" "${file_path}" | wc -l) in
    0)
      logger::info "Parameter '${parameter}' not found in ${file_path}. Inserting it."
      sed -i -e "/^${insertion_point}.*$/a ${parameter} = ${value}" "${file_path}"
      ;;
    1)
      logger::info "Parameter '${parameter}' found in ${file_path}. Updating it."
      sed -i -e "s/^${parameter}.*$/${parameter} = ${value}/g" "${file_path}"
      ;;
    *)
      logger::error "More than one line matched the search criteria. Aborting."
      exit 1
      ;;
  esac
}

function main() {
  utils::set_exit_trap

  #############################################################################

  logger::title "Start of $0"

  logger::info "This script: "
  logger::info "1) Installs and configures Unattended-Upgrades, Apticron and related packages"

  #############################################################################

  logger::title "Parse Input Parameters"

  utils::parse_parameters "$@"

  #############################################################################

  logger::title "Install Unattended-Upgrades, Apticron and related packages"

  export DEBIAN_FRONTEND=noninteractive
  logger::action "Installing packages..."
  apt install -y \
    apticron \
    unattended-upgrades

  #############################################################################

  logger::title "Configure Unattended-Upgrades"

  logger::action "Enabling OS updates..."
  sed -i -e "s|^//\([[:blank:]]*\"\${distro_id}:\${distro_codename}-updates\";\)$|  \1|g" "${UNATTENDED_UPGRADES_CONF_FILE_PATH}"

  logger::action "Setting 'Unattended-Upgrade::Mail' parameter to '${parameters[server_admin_email]}'..."
  sed -i -e "s|^//\(Unattended-Upgrade::Mail\) .*$|\1 \"${parameters[server_admin_email]}\";|g" "${UNATTENDED_UPGRADES_CONF_FILE_PATH}"

  logger::action "Enabling 'Unattended-Upgrade::Remove-Unused-Kernel-Packages'..."
  sed -i -e "s|^//\(Unattended-Upgrade::Remove-Unused-Kernel-Packages\) .*$|\1 \"true\";|g" "${UNATTENDED_UPGRADES_CONF_FILE_PATH}"

  logger::action "Enabling 'Unattended-Upgrade::Remove-Unused-Dependencies'..."
  sed -i -e "s|^//\(Unattended-Upgrade::Remove-Unused-Dependencies\) .*$|\1 \"true\";|g" "${UNATTENDED_UPGRADES_CONF_FILE_PATH}"

  logger::action "Enabling 'Unattended-Upgrade::Automatic-Reboot'..."
  sed -i -e "s|^//\(Unattended-Upgrade::Automatic-Reboot\) .*$|\1 \"true\";|g" "${UNATTENDED_UPGRADES_CONF_FILE_PATH}"

  logger::action "Setting 'Unattended-Upgrade::Automatic-Reboot-Time' to '${parameters[server_reboot_utc_time]}'..."
  sed -i -e "s|^//\(Unattended-Upgrade::Automatic-Reboot-Time\) .*$|\1 \"${parameters[server_reboot_utc_time]}\";|g" "${UNATTENDED_UPGRADES_CONF_FILE_PATH}"

  #############################################################################

  logger::title "Configure Aptitude (apt)"

  logger::action "Setting 'APT::Periodic::Download-Upgradeable-Packages' parameter to '1'..."
  # This parameter is not present in the original file but will be there in subsequent script runs.
  update_or_append "APT::Periodic::Download-Upgradeable-Packages" "1" "${AUTO_UPGRADES_CONF_FILE_PATH}"

  logger::action "Setting 'APT::Periodic::AutocleanInterval' parameter to '7'..."
  # This parameter is not present in the original file but will be there in subsequent script runs.
  update_or_append "APT::Periodic::AutocleanInterval" "7" "${AUTO_UPGRADES_CONF_FILE_PATH}"

  #############################################################################

  logger::title "Configure Apticron"

  logger::action "Setting 'EMAIL' parameter to '${parameters[server_admin_email]}'..."
  sed -i -e "s/^\(EMAIL=\).*$/\1\"${parameters[server_admin_email]}\"/g" "${APTICRON_CONF_FILE_PATH}"

  logger::action "Setting 'SYSTEM' parameter to '${parameters[server_resource_name]}'..."
  sed -i -e "s/^\(SYSTEM=\).*$/\1\"${parameters[server_resource_name]}\"/g" "${APTICRON_CONF_FILE_PATH}"

  logger::action "Disabling 'NOTIFY_HOLDS' parameter..."
  sed -i -e "s/^\(NOTIFY_HOLDS=\).*$/\1\"0\"/g" "${APTICRON_CONF_FILE_PATH}"

  logger::action "Disabling 'NOTIFY_NEW' parameter..."
  sed -i -e "s/^\(NOTIFY_NEW=\).*$/\1\"0\"/g" "${APTICRON_CONF_FILE_PATH}"

  logger::action "Enabling 'NOTIFY_NO_UPDATES' parameter..."
  sed -i -e "s/^\(NOTIFY_NO_UPDATES=\).*$/\1\"0\"/g" "${APTICRON_CONF_FILE_PATH}"

  logger::action "Setting 'CUSTOM_SUBJECT' parameter to '[apticron] \$SYSTEM: \$NUM_PACKAGES package update(s)'..."
  sed -i -e "s/^# \(CUSTOM_SUBJECT=\)\"\".*$/\1'[apticron] \$SYSTEM: \$NUM_PACKAGES package update(s)'/g" "${APTICRON_CONF_FILE_PATH}"

  logger::action "Setting 'CUSTOM_NO_UPDATES_SUBJECT' parameter to '[apticron] \$SYSTEM: no updates'..."
  sed -i -e "s/^# \(CUSTOM_NO_UPDATES_SUBJECT=\)\"\".*$/\1'[apticron] \$SYSTEM: no updates'/g" "${APTICRON_CONF_FILE_PATH}"

  #############################################################################

  logger::title "Configure Postfix"

  logger::action "Setting 'myhostname' parameter to '${parameters[server_fqdn]}'..."
  sed -i -e "s/^\(myhostname =\).*$/\1 ${parameters[server_fqdn]}/g" "${POSTFIX_CONF_FILE_PATH}"

  logger::action "Setting 'myorigin' parameter to '\$myhostname'..."
  # This setting may not be present in file. If it is, we update it.
  sed -i -e "s/^\(myorigin =\).*$/\1 \$myhostname/g" "${POSTFIX_CONF_FILE_PATH}"

  logger::action "Setting 'relayhost' parameter to '${parameters[smtp_server_fqdn]}:${parameters[smtp_server_port]}'..."
  sed -i -e "s/^\(relayhost =\).*$/\1 ${parameters[smtp_server_fqdn]}:${parameters[smtp_server_port]}/g" "${POSTFIX_CONF_FILE_PATH}"

  logger::action "Setting 'smtp_tls_security_level' parameter to 'encrypt'..."
  # This parameter is not present in the original file but will be there in subsequent script runs.
  update_or_insert "smtp_tls_security_level" "encrypt" "smtp_tls_session_cache_database" "${POSTFIX_CONF_FILE_PATH}"

  logger::action "Reloading configuration file..."
  service postfix reload

  #############################################################################

  logger::title "End of $0"

  #############################################################################

  utils::unset_exit_trap
}

main "$@"
